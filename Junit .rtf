{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red0\green0\blue192;\red42\green0\blue255;
}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;\csgenericrgb\c16471\c0\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Why not JUNIT 4 ?? \
	- not upto date with new testing patterns, not upto date with java language features \
ARCHITECTURE - platform/engine which runs the tests, Jupiter api, vintage for old tests\
Junit-jupiter-api - api for writing test using junit Jupiter\
Junit-jupiter-engine- implementation  of testEngine api for unit Jupiter\
TDD - TEst driven development  . Write test first, then code.\
\

\f1\b Test LIFE CYCLE\

\f0\b0 Instance is created for every method run, managed and destroyed\
It has diff hooks - to be run in diff parts of execution.\
Hooks - @BeforeAll, @AfterAll - these two have to be static. As for these instance is not created\
@BeforeEach, @AfterEach\
\

\f1\b Annotationss
\f0\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	} @Test - define that it is a test method\
{\listtext	2.	}assertEquals( expected , actual ,  string msg)\
{\listtext	3.	}assertArrayEquals , assertIterableEquals\
{\listtext	4.	}assertNotEquals , assertNotSame\
{\listtext	5.	}fail() - fails the test no matter what happens\
{\listtext	6.	}assertTrue , assertFalse\
{\listtext	7.	}assertThrows(ArithmeticException.class, lambda) - checking if it throws the right exception\
{\listtext	8.	}assertAll( () - > lambda , () -> lambda );\
{\listtext	9.	}@DisplayName - can name a method/class based on its functioning\
{\listtext	10.	}@Disabled - can disable  a methods\
{\listtext	11.	}@RepeatedTest(no_of_repeats) - u can use RepetitionInfo repetition in argument of method and use repetition.getCurrentRepition/getTotalRepetition\
{\listtext	12.	}@Tag(\'93name\'94) - tagging the tests, managing the tests and selectively running tests by Run configurations > creating new configuration in unit > name it > run all test in junit5 select > include tags - name of the tag u want to execute tests>apply n save. Run that test.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Conditional Execution\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0
\f0\b0 \cf0 {\listtext	1.	}EnabledOnOs(OS.LINUX)\
{\listtext	2.	}EnabledOnJre(JRE.JAVA_11)\
{\listtext	3.	}EnabledIf\
{\listtext	4.	}EnabledIfSystem Property\
{\listtext	5.	}EnabledIfEnvironmentVariable\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Handling external factors\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\f0\b0 \cf0 {\listtext	1.	}assumeTrue(value) - assumes value is True; if not then fails\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
@TestInstance(TestInstance.Lifecycle.PER_METHOD / PER_CLASS) - instance is created for each method/class\
\

\f1\b Nested classes\

\f0\b0 @Nested should be mentioned. If one test fails, whole class fails. \
\

\f1\b String msg in assert computes, so use lambda to consume less resources\
\
@TestInfo and @TestReporter\

\f0\b0 Make instances of it as arguments. Declare in the class\
Test info contains info about test\
Test reporter lets u access the log where unit is reporting , u can add msg using this\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 System.out.println("Running "+testInfo.getDisplayName()+ " with tags "+testInfo.getTags())\
\pard\pardeftab720\partightenfactor0
\cf3 testReporter\cf0 .publishEntry(\cf4 "Running "\cf0 +\cf3 testInfo\cf0 .getDisplayName()+ \cf4 " with tags "\cf0 +\cf3 testInfo\cf0 .getTags());\
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \
}